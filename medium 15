class MultiplicationTableThread extends Thread {
    private int number;

    public MultiplicationTableThread(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        System.out.println("Thread ID: " + Thread.currentThread().getId() + " is running.");

        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " * " + i + " = " + (number * i));

            // Introduce a delay to simulate different stages of the thread life cycle
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Thread ID: " + Thread.currentThread().getId() + " has finished.");
    }
}

public class ThreadLifeCycleExample {
    public static void main(String[] args) {
        MultiplicationTableThread table5Thread = new MultiplicationTableThread(5);
        MultiplicationTableThread table10Thread = new MultiplicationTableThread(10);

        // Start the threads
        table5Thread.start();
        table10Thread.start();

        // Wait for both threads to finish using join()
        try {
            table5Thread.join();
            table10Thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Main thread has finished.");
    }
}
