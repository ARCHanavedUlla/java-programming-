class Customer {
    private int accountNo;
    private String accName;
    private double balance;

    public Customer(int accountNo, String accName, double balance) {
        this.accountNo = accountNo;
        this.accName = accName;
        this.balance = balance;
    }

    public synchronized void deposit(double amount) {
        System.out.println("Depositing amount: " + amount);
        balance += amount;
        System.out.println("Deposit operation success, new balance: " + balance);
        notify(); // Notify the waiting thread (withdraw) that the deposit is completed
    }

    public synchronized void withdraw(double amount) {
        System.out.println("Withdrawing amount: " + amount);

        // Check if sufficient balance is available for withdrawal
        while (amount > balance) {
            System.out.println("Insufficient balance. Waiting for deposit...");
            try {
                wait(); // Wait for deposit operation to complete
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // Withdrawal operation
        balance -= amount;
        System.out.println("Withdraw operation success, new balance: " + balance);
    }
}

public class BankDemo {
    public static void main(String[] args) {
        Customer customer = new Customer(123456, "John Doe", 10000.0);

        // Thread for withdrawal operation
        Thread withdrawalThread = new Thread(() -> {
            double withdrawAmount = 12000;
            customer.withdraw(withdrawAmount);
        });

        // Thread for deposit operation
        Thread depositThread = new Thread(() -> {
            double depositAmount = 3000;
            customer.deposit(depositAmount);
        });

        // Start both threads
        withdrawalThread.start();
        depositThread.start();
    }
}
